#include <stdio.h>
#include <string.h>


void encrypt(char *message, int rails) {
    int len = strlen(message);
    char matrix[rails][len];
    
    
    for (int i = 0; i < rails; i++) {
        for (int j = 0; j < len; j++) {
            matrix[i][j] = ' ';
        }
    }

   
    int rail = 0;
    int direction = 1; // 1 for down, -1 for up

    for (int i = 0; i < len; i++) {
        matrix[rail][i] = message[i];
        rail += direction;

        
        if (rail == 0 || rail == rails - 1) {
            direction *= -1;
        }
    }

   
    int index = 0;
    for (int i = 0; i < rails; i++) {
        for (int j = 0; j < len; j++) {
            if (matrix[i][j] != ' ') {
                message[index++] = matrix[i][j];
            }
        }
    }
    message[index] = '\0';
}


void decrypt(char *message, int rails) {
    int len = strlen(message);
    char matrix[rails][len];

    
    for (int i = 0; i < rails; i++) {
        for (int j = 0; j < len; j++) {
            matrix[i][j] = ' ';
        }
    }

    
    int rail = 0;
    int direction = 1;

    for (int i = 0; i < len; i++) {
        matrix[rail][i] = '*';
        rail += direction;

        
        if (rail == 0 || rail == rails - 1) {
            direction *= -1;
        }
    }

   
    int index = 0;
    for (int i = 0; i < rails; i++) {
        for (int j = 0; j < len; j++) {
            if (matrix[i][j] == '*') {
                matrix[i][j] = message[index++];
            }
        }
    }

    
    index = 0;
    rail = 0;
    direction = 1;

    for (int i = 0; i < len; i++) {
        message[i] = matrix[rail][i];
        rail += direction;

        
        if (rail == 0 || rail == rails - 1) {
            direction *= -1;
        }
    }
    message[len] = '\0';
}

int main() {
    char message[] = "THE RAIL FENCE CIPHER IS A FORM OF TRANSPOSITION CIPHER THAT GETS ITS NAME FROM THE WAY IN WHICH IT IS ENCODED";
    int rails = 3;

    printf("Original Message: %s\n", message);

    encrypt(message, rails);
    printf("Encrypted Message: %s\n", message);

    decrypt(message, rails);
    printf("Decrypted Message: %s\n", message);

    return 0;
}
