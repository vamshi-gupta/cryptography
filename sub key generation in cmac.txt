#include &lt;stdio.h&gt;
typedef unsigned char byte;
void print_hex(byte *data, int length) {
for (int i = 0; i &lt; length; i++) {
printf(&quot;%02x&quot;, data[i]);
}
printf(&quot;\n&quot;);
}
void generate_subkeys(byte *initial_key, int block_size, byte *subkey1, byte *subkey2)
{ byte L[block_size / 8];
byte const_Rb[block_size / 8];
byte zero[block_size / 8] = {0};

// Calculate L
byte msb = (initial_key[0] &amp; 0x80) ? 0x87 : 0x00;
for (int i = 0; i &lt; block_size / 8; i++) {
L[i] = (initial_key[i] &lt;&lt; 1) | ((i &lt; block_size / 8 - 1) ? (initial_key[i + 1] &gt;&gt; 7) : 0);
subkey1[i] = L[i] ^ const_Rb[i];
}
// Left shift L
byte carry = (L[0] &amp; 0x80) ? 1 : 0;
for (int i = 0; i &lt; block_size / 8; i++) {
L[i] = (L[i] &lt;&lt; 1) | carry;
carry = (L[i] &amp; 0x80) ? 1 : 0;
}
// Calculate subkey2
for (int i = 0; i &lt; block_size / 8; i++) {
subkey2[i] = L[i] ^ const_Rb[i];
}
}
int main() {
// Set block size (64 or 128 bits)
int block_size = 128;
byte initial_key[block_size / 8];
byte subkey1[block_size / 8];
byte subkey2[block_size / 8];
// Initialize initial_key with your key data here
// ...
// Calculate constants based on block size
byte const_Rb[block_size / 8];
if (block_size == 64) {
byte const_64 = 0x1B; // Rb for 64-bit block size
for (int i = 0; i &lt; block_size / 8; i++) {
const_Rb[i] = const_64;
}
} else if (block_size == 128) {
byte const_128 = 0x87; // Rb for 128-bit block size
for (int i = 0; i &lt; block_size / 8; i++) {
const_Rb[i] = const_128;
}
} else {
printf(&quot;Unsupported block size\n&quot;);
return 1;
}
generate_subkeys(initial_key, block_size, subkey1, subkey2);

printf(&quot;Subkey 1: &quot;);
print_hex(subkey1, block_size / 8);
printf(&quot;Subkey 2: &quot;);
print_hex(subkey2, block_size / 8);
return 0;
}
